package functionality;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Timer;

import javax.swing.BorderFactory;
import javax.swing.JPanel;

public class Panel extends JPanel implements KeyListener {
	Game game;
	int currentDirection;

	public Panel(int height, int width) {
		game = new Game(height, width);
		currentDirection = KeyEvent.VK_RIGHT;
		static final int DELAY = 175;
	}
	Timer timer;
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		for (int i = 0; i < game.getBoard().getHeight(); i++)
			for (int j = 0; j < game.getBoard().getWidth(); j++)
				game.getBoard().getMatrix()[i][j].drawBloc(g);
	}

	@Override
	public void keyPressed(KeyEvent e) {
		if (e.getKeyCode() != KeyEvent.VK_UP && e.getKeyCode() != KeyEvent.VK_DOWN && e.getKeyCode() != KeyEvent.VK_LEFT
				&& e.getKeyCode() != KeyEvent.VK_RIGHT)
			return;
		currentDirection = e.getKeyCode();
//		game.moveSnake(currentDirection);
		repaint();
	}

	@Override
	public void keyReleased(KeyEvent arg0) {
	}

	@Override
	public void keyTyped(KeyEvent arg0) {
	}

	public void gameLogic() {
		boolean gameOver = false;
		int i = 0;
		while (i != 20) {
			game.moveSnake(currentDirection);
			repaint();
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			i++;
		}
	}
}
